version: '3.8'

services:
  # Angular Frontend with Bootstrap 5.3.3
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://stock-prediction:8081
      - BOOTSTRAP_VERSION=5.3.3
      - ANGULAR_VERSION=20.1.0
    depends_on:
      stock-prediction:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=frontend"
      - "description=Bootstrap-Enhanced Angular Frontend"

  # Go Backend API with ML Prediction Service
  stock-prediction:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      # Server Configuration
      - SERVER_PORT=8081
      - SERVER_READ_TIMEOUT=30s
      - SERVER_WRITE_TIMEOUT=30s
      - LOG_LEVEL=info
      
      # Stock Configuration
      - STOCK_SYMBOL=NVDA
      - STOCK_LOOKBACK_DAYS=5
      - STOCK_BUY_THRESHOLD=1.01
      - STOCK_SELL_THRESHOLD=0.99
      
      # ML Configuration
      - ML_PYTHON_SCRIPT=scripts/ml/predict.py
      - ML_MODEL_PATH=/app/persistent_data/ml_models/nvda_lstm_model
      - ML_PREDICTION_TTL=5m
      - STOCK_DATA_CACHE_PATH=/app/persistent_data/stock_data/cache
      - PREDICTION_DB_PATH=/app/database/predictions.db
      
      # Cache Configuration
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=300
      - CACHE_MAX_SIZE=1000
      
      # CORS Configuration
      - CORS_ORIGINS=*
      
      # Frontend Integration
      - FRONTEND_URL=http://frontend:8080
      - BOOTSTRAP_MODE=enabled
      - UI_THEME=bootstrap
    volumes:
      - persistent_data:/app/persistent_data
      - ./scripts:/app/scripts:ro
      - database_data:/app/database
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=backend"
      - "description=Go Backend with ML Prediction Engine"

  # Redis Cache for High Performance
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=cache"
      - "description=Redis Cache for ML Predictions"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    depends_on:
      - stock-prediction
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=monitoring"
      - "description=Prometheus Metrics Collection"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stock-prediction-network
    user: "472:472"
    labels:
      - "com.docker.compose.service=visualization"
      - "description=Grafana Monitoring Dashboards"

  # Nginx Reverse Proxy (Optional - for production load balancing)
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - stock-prediction
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=proxy"
      - "description=Nginx Reverse Proxy"

# Networks
networks:
  stock-prediction-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Persistent Volumes
volumes:
  persistent_data:
    driver: local
  database_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data
    labels:
      - "com.docker.compose.volume=persistent-data"

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/prometheus
    labels:
      - "com.docker.compose.volume=prometheus-data"

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/grafana
    labels:
      - "com.docker.compose.volume=grafana-data"

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/redis
    labels:
      - "com.docker.compose.volume=redis-data"

  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/nginx/logs
    labels:
      - "com.docker.compose.volume=nginx-logs"
