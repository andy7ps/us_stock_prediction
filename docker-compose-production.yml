version: '3.8'

services:
  # Bootstrap-Enhanced Angular Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - BOOTSTRAP_VERSION=5.3.3
        - BUILD_OPTIMIZATION=true
    ports:
      - "8080:80"
    environment:
      - NGINX_HOST=0.0.0.0
      - NGINX_PORT=80
      - API_BASE_URL=http://stock-prediction:8081
      - BOOTSTRAP_THEME=enabled
      - BOOTSTRAP_ICONS_VERSION=1.13.1
      - ANGULAR_VERSION=20.1.0
    volumes:
      # Persistent logs
      - ./persistent_data/frontend/logs:/var/log/nginx
      # Static assets (optional)
      - ./frontend/public:/usr/share/nginx/html/public:ro
    depends_on:
      stock-prediction:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=frontend"
      - "com.docker.compose.version=3.2.0"
      - "description=Bootstrap-Enhanced Angular Frontend"

  # Go Backend API with ML Prediction Service
  stock-prediction:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - GO_VERSION=1.23
    ports:
      - "8081:8081"
    environment:
      # Server Configuration
      - SERVER_PORT=8081
      - SERVER_READ_TIMEOUT=30s
      - SERVER_WRITE_TIMEOUT=30s
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Stock Configuration
      - STOCK_SYMBOL=NVDA
      - STOCK_LOOKBACK_DAYS=5
      - STOCK_BUY_THRESHOLD=1.01
      - STOCK_SELL_THRESHOLD=0.99
      
      # API Configuration
      - API_TIMEOUT=30s
      - ML_PREDICTION_TTL=5m
      - CORS_ORIGINS=*
      
      # Frontend Integration
      - FRONTEND_URL=http://frontend:80
      - BOOTSTRAP_MODE=enabled
      - UI_THEME=bootstrap
      
      # Persistent Data Paths
      - ML_MODEL_PATH=/app/persistent_data/ml_models/nvda_lstm_model
      - ML_SCALER_PATH=/app/persistent_data/scalers/scaler.pkl
      - STOCK_DATA_CACHE_PATH=/app/persistent_data/stock_data/cache
      - PREDICTION_CACHE_PATH=/app/persistent_data/stock_data/predictions
      - LOG_PATH=/app/persistent_data/logs
      
      # Performance Configuration
      - CACHE_TTL=300s
      - MAX_CONCURRENT_REQUESTS=100
      - RATE_LIMIT=1000
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=stockprediction2025
    volumes:
      # Persistent data volumes
      - ./persistent_data:/app/persistent_data
      # Read-only script mount
      - ./scripts:/app/scripts:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    networks:
      - stock-prediction-network
    labels:
      - "com.docker.compose.service=backend"
      - "description=Go Backend API with ML Predictions"

  # Redis Cache for High Performance
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=stockprediction2025
    volumes:
      - ./persistent_data/redis:/data
    command: >
      redis-server 
      --appendonly yes 
      --requirepass stockprediction2025
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    restart: unless-stopped
    networks:
      - stock-prediction-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "stockprediction2025", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.docker.compose.service=cache"
      - "description=Redis Cache for Performance"

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_STORAGE_PATH=/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - ./persistent_data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
      - '--web.external-url=http://localhost:9090'
    restart: unless-stopped
    networks:
      - stock-prediction-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Run as nobody user for security
    user: "65534:65534"
    labels:
      - "com.docker.compose.service=monitoring"
      - "description=Prometheus Metrics Collection"

  # Grafana Dashboard and Visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      # Authentication
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ALLOW_SIGN_UP=false
      
      # Paths
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      
      # Server Configuration
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_HTTP_PORT=3000
      
      # Database
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      
      # Analytics and Updates
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
      
      # Bootstrap Theme Support
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/stock-prediction-dashboard.json
      
      # Performance
      - GF_RENDERING_SERVER_URL=http://localhost:8081
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000
    volumes:
      # Persistent Grafana data
      - ./persistent_data/grafana:/var/lib/grafana
      - ./persistent_data/grafana/logs:/var/log/grafana
      
      # Configuration (read-only)
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - stock-prediction-network
    # Run as grafana user for security
    user: "472:472"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.docker.compose.service=visualization"
      - "description=Grafana Dashboard and Visualization"

  # Nginx Reverse Proxy (Optional - for production load balancing)
  nginx-proxy:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./persistent_data/nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - stock-prediction
    restart: unless-stopped
    networks:
      - stock-prediction-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.docker.compose.service=proxy"
      - "description=Nginx Reverse Proxy"
    profiles:
      - production

networks:
  stock-prediction-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
    labels:
      - "com.docker.compose.network=stock-prediction"
      - "description=Stock Prediction Service Network"

volumes:
  # Persistent data volumes
  persistent_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data
    labels:
      - "com.docker.compose.volume=persistent-data"
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/prometheus
    labels:
      - "com.docker.compose.volume=prometheus-data"
      
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/grafana
    labels:
      - "com.docker.compose.volume=grafana-data"
      
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/redis
    labels:
      - "com.docker.compose.volume=redis-data"

  frontend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./persistent_data/frontend/logs
    labels:
      - "com.docker.compose.volume=frontend-logs"
